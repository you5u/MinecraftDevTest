unsigned __int64 *__usercall Level::getLevelId@<X0>(Level *this@<X0>, unsigned __int64 *a2@<X8>)
{
  return CommandFilePath::CommandFilePath(a2, (__int128 *)this + 466);
}

__int64 __fastcall Level::setLevelId(__int64 a1, unsigned __int8 *a2)
{
  __int64 result; // x0
  unsigned __int64 v3; // x8
  __int64 v4; // x10
  void *v5; // x1
  unsigned __int64 v6; // x2

  result = a1 + 7456;
  if ( (unsigned __int8 *)result != a2 )
  {
    v3 = *a2;
    v4 = *((_QWORD *)a2 + 1);
    if ( (v3 & 1) != 0 )
      v5 = (void *)*((_QWORD *)a2 + 2);
    else
      v5 = a2 + 1;
    if ( (v3 & 1) != 0 )
      LODWORD(v6) = v4;
    else
      v6 = v3 >> 1;
    return std::string::assign(result, v5, v6);
  }
  return result;
}

__int64 __fastcall Actor::isRemoved(__int64 a1)
{
  return *(unsigned __int8 *)(a1 + 937);
}

__int64 __fastcall Actor::remove(Level **this)
{
  OwnerStorageEntity *v1; // x20
  unsigned int *StackRef; // x21
  __int64 v4; // x0
  unsigned __int64 v5; // x21
  _QWORD *v6; // x0
  __int64 v7; // x8
  unsigned __int64 v8; // x9
  __int64 v9; // x8
  __int64 v10; // x8
  DwellerComponent *v11; // x0
  unsigned int *v12; // x21
  __int64 v13; // x0
  unsigned __int64 v14; // x21
  _QWORD *v15; // x0
  __int64 v16; // x8
  unsigned __int64 v17; // x9
  __int64 v18; // x8
  __int64 v19; // x8
  BlockPosTrackerComponent *v20; // x0
  unsigned int *v21; // x20
  __int64 v22; // x0
  unsigned __int64 v23; // x20
  _QWORD *v24; // x0
  __int64 v25; // x8
  unsigned __int64 v26; // x9
  __int64 v27; // x8
  __int64 v28; // x8
  BossComponent *v29; // x20
  _QWORD *i; // x21
  Player *Player; // x0
  ActorEventCoordinator *ActorEventCoordinator; // x0
  __int64 result; // x0

  v1 = (OwnerStorageEntity *)(this + 1);
  if ( (OwnerStorageEntity::_hasValue((OwnerStorageEntity *)(this + 1)) & 1) != 0 )
  {
    StackRef = (unsigned int *)OwnerStorageEntity::_getStackRef(v1);
    v4 = EntityContextBase::_enttRegistry((EntityContextBase *)StackRef);
    v5 = StackRef[2];
    v6 = (_QWORD *)entt::basic_registry<EntityId>::assure<DwellerComponent>(v4);
    v7 = v6[1];
    v8 = (v5 >> 13) & 0x7F;
    if ( v8 < (v6[2] - v7) >> 3 )
    {
      v9 = *(_QWORD *)(v7 + 8 * v8);
      if ( v9 )
      {
        v10 = *(unsigned int *)(v9 + 4 * (v5 & 0x1FFF));
        if ( (~(_DWORD)v10 & 0xFFFFF) != 0 )
        {
          v11 = (DwellerComponent *)(v6[7] + 104 * v10);
          if ( v11 )
            DwellerComponent::onRemove(v11, (Actor *)this);
        }
      }
    }
  }
  if ( (OwnerStorageEntity::_hasValue(v1) & 1) != 0 )
  {
    v12 = (unsigned int *)OwnerStorageEntity::_getStackRef(v1);
    v13 = EntityContextBase::_enttRegistry((EntityContextBase *)v12);
    v14 = v12[2];
    v15 = (_QWORD *)entt::basic_registry<EntityId>::assure<BlockPosTrackerComponent>(v13);
    v16 = v15[1];
    v17 = (v14 >> 13) & 0x7F;
    if ( v17 < (v15[2] - v16) >> 3 )
    {
      v18 = *(_QWORD *)(v16 + 8 * v17);
      if ( v18 )
      {
        v19 = *(unsigned int *)(v18 + 4 * (v14 & 0x1FFF));
        if ( (~(_DWORD)v19 & 0xFFFFF) != 0 )
        {
          v20 = (BlockPosTrackerComponent *)(v15[7] + 16 * v19);
          if ( v20 )
            BlockPosTrackerComponent::onRemove(v20, (Actor *)this);
        }
      }
    }
  }
  if ( (OwnerStorageEntity::_hasValue(v1) & 1) != 0 )
  {
    v21 = (unsigned int *)OwnerStorageEntity::_getStackRef(v1);
    v22 = EntityContextBase::_enttRegistry((EntityContextBase *)v21);
    v23 = v21[2];
    v24 = (_QWORD *)entt::basic_registry<EntityId>::assure<BossComponent>(v22);
    v25 = v24[1];
    v26 = (v23 >> 13) & 0x7F;
    if ( v26 < (v24[2] - v25) >> 3 )
    {
      v27 = *(_QWORD *)(v25 + 8 * v26);
      if ( v27 )
      {
        v28 = *(unsigned int *)(v27 + 4 * (v23 & 0x1FFF));
        if ( (~(_DWORD)v28 & 0xFFFFF) != 0 )
        {
          v29 = (BossComponent *)(v24[7] + 104 * v28);
          if ( v29 )
          {
            for ( i = *(_QWORD **)(Level::getPlayerList(this[106]) + 16); i; i = (_QWORD *)*i )
            {
              Player = (Player *)Level::getPlayer(this[106], (const mce::UUID *)(i + 2));
              if ( Player )
                BossComponent::unRegisterPlayer(v29, (Actor *)this, Player);
            }
          }
        }
      }
    }
  }
  ActorEventCoordinator = (ActorEventCoordinator *)Level::getActorEventCoordinator(this[106]);
  result = ActorEventCoordinator::sendActorRemoved(ActorEventCoordinator, (Actor *)this);
  *((_BYTE *)this + 937) = 1;
  return result;
}